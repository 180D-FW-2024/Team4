# -*- coding: utf-8 -*-
"""Model for Fall Detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cb4f7d3HcocBMVFikUQy6Ugy_UqDKX7z
"""

!pip install tensorflow tensorflow-addons

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

#load dataset after importing into notebook
data = pd.read_csv()

# Assuming column names contain "sternum" and "waist"
sternum_cols = [col for col in data.columns if 'sternum' in col.lower()]
waist_cols = [col for col in data.columns if 'waist' in col.lower()]

filtered_data = data[sternum_cols + waist_cols]
labels = data['label']

scaler = StandardScaler()
filtered_data_scaled = scaler.fit_transform(filtered_data)

X_train, X_test, y_train, y_test = train_test_split(filtered_data_scaled, labels, test_size=0.2, random_state=42)

model = keras.Sequential([
    keras.layers.InputLayer(input_shape=(X_train.shape[1],)),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(len(np.unique(y_train)), activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(X_train, y_train, epochs=10, validation_split=0.2, batch_size=32)

#test
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.2f}")

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('fall_detection_model.tflite', 'wb') as f:
    f.write(tflite_model)

print("Model saved as fall_detection_model.tflite")

interpreter = tf.lite.Interpreter(model_path='fall_detection_model.tflite')
interpreter.allocate_tensors()

#testing
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

#testing single x
input_data = np.expand_dims(X_test[0], axis=0).astype(np.float32)
interpreter.set_tensor(input_details[0]['index'], input_data)
interpreter.invoke()

output_data = interpreter.get_tensor(output_details[0]['index'])
print("Predicted:", np.argmax(output_data))

